using System.Linq;
using Diz.Core;
using Diz.Core.export;
using Diz.Core.model;
using Diz.Core.model.snes;
using Diz.Cpu._65816;
using Diz.Test.Utils;
using FluentAssertions;
using Xunit;
using Xunit.Abstractions;

namespace Diz.Test;

public class LogCreatorTests2 : ContainerFixture
{
    [Inject] private readonly IDataFactory dataFactory = null!;
    
    [Fact]
    public void TestCorrectDataLabelAutoGenerated()
    {
        var data = CreateSampleData();
        var assemblyExportResult = LogWriterHelper.ExportAssembly(data, creator =>
        {
            creator.Settings = new LogWriterSettings
            {
                OutputExtraWhitespace = false,
                OutputToString = true,
                Structure = LogWriterSettings.FormatStructure.SingleFile,
            };
        });

        Assert.True(assemblyExportResult.Success);

        assemblyExportResult.OutputStr.Should().Contain("DATA8_");
        assemblyExportResult.OutputStr.Should().Contain("DATA8_808003");
    }

    private readonly ITestOutputHelper debugWriter;
    public LogCreatorTests2(ITestOutputHelper debugWriter)
    {
        this.debugWriter = debugWriter;
    }
    
    private Data CreateSampleData()
    {
        var data = dataFactory.Create();
        
        data.RomMapMode = RomMapMode.LoRom;
        data.RomSpeed = RomSpeed.FastRom;
        data.RomBytes = new RomBytes
        {
            // test that we generate a DATA_XXXXXX label correctly here
            
            // CODE_808000: LDA.W DATA_808003,X
            new()
            {
                // this works
                // Rom = 0xBD, TypeFlag = FlagType.Opcode, MFlag = true, Point = InOutPoint.InPoint, DataBank = 0x80, DirectPage = 0x2100
                Rom = 0xBD, TypeFlag = FlagType.Opcode
            },
            new() { Rom = 0x03, TypeFlag = FlagType.Operand, DataBank = 0x80, DirectPage = 0x2100 }, // Test_Data
            new() { Rom = 0x80, TypeFlag = FlagType.Operand, DataBank = 0x80, DirectPage = 0x2100 }, // Test_Data
            
            // should automatically generate a label named "DATA_808003" for this data section
            new() { Rom = 0x01, TypeFlag = FlagType.Data8Bit },
            new() { Rom = 0x02, TypeFlag = FlagType.Data8Bit },
            new() { Rom = 0x03, TypeFlag = FlagType.Data8Bit }
        };

        // no labels
        // data.Labels.AddLabel(0x808000 + 0x06, new Label { Name = "Test22" });
        // data.Labels.AddLabel(0x808000 + 0x5B, new Label { Name = "Test_Data", Comment = "Pretty cool huh?" });
        
        return data;
    }
}